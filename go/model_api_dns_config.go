/*
Fly Machines API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fly-sdk

import (
	"encoding/json"
)

// checks if the ApiDNSConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiDNSConfig{}

// ApiDNSConfig struct for ApiDNSConfig
type ApiDNSConfig struct {
	SkipRegistration *bool `json:"skip_registration,omitempty"`
}

// NewApiDNSConfig instantiates a new ApiDNSConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiDNSConfig() *ApiDNSConfig {
	this := ApiDNSConfig{}
	return &this
}

// NewApiDNSConfigWithDefaults instantiates a new ApiDNSConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiDNSConfigWithDefaults() *ApiDNSConfig {
	this := ApiDNSConfig{}
	return &this
}

// GetSkipRegistration returns the SkipRegistration field value if set, zero value otherwise.
func (o *ApiDNSConfig) GetSkipRegistration() bool {
	if o == nil || IsNil(o.SkipRegistration) {
		var ret bool
		return ret
	}
	return *o.SkipRegistration
}

// GetSkipRegistrationOk returns a tuple with the SkipRegistration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDNSConfig) GetSkipRegistrationOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipRegistration) {
		return nil, false
	}
	return o.SkipRegistration, true
}

// HasSkipRegistration returns a boolean if a field has been set.
func (o *ApiDNSConfig) HasSkipRegistration() bool {
	if o != nil && !IsNil(o.SkipRegistration) {
		return true
	}

	return false
}

// SetSkipRegistration gets a reference to the given bool and assigns it to the SkipRegistration field.
func (o *ApiDNSConfig) SetSkipRegistration(v bool) {
	o.SkipRegistration = &v
}

func (o ApiDNSConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiDNSConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SkipRegistration) {
		toSerialize["skip_registration"] = o.SkipRegistration
	}
	return toSerialize, nil
}

type NullableApiDNSConfig struct {
	value *ApiDNSConfig
	isSet bool
}

func (v NullableApiDNSConfig) Get() *ApiDNSConfig {
	return v.value
}

func (v *NullableApiDNSConfig) Set(val *ApiDNSConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableApiDNSConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableApiDNSConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiDNSConfig(val *ApiDNSConfig) *NullableApiDNSConfig {
	return &NullableApiDNSConfig{value: val, isSet: true}
}

func (v NullableApiDNSConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiDNSConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


